name: MUDEK - Build and Deploy

on:
  push:
    branches:
      - 'main'      # Main branch push ‚Üí Auto tag + Web deploy + Desktop builds
  workflow_dispatch:   # Manual trigger

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write
  pages: write
  id-token: write

# Allow only one concurrent deployment for Pages
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # üè∑Ô∏è Auto Tag Creation with Timestamp
  create-tag:
    name: üè∑Ô∏è Create Auto Tag
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      tag: ${{ steps.create_tag.outputs.tag }}
      version: ${{ steps.create_tag.outputs.version }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Create Timestamp Tag
      id: create_tag
      shell: bash
      run: |
        # Benzersiz timestamp ile versiyon olu≈ütur (UTC timezone)
        TIMESTAMP=$(TZ=UTC date +%Y%m%d-%H%M%S)
        BUILD_NUMBER=$(TZ=UTC date +%s)
        
        # Kƒ±sa commit hash
        SHORT_SHA=$(git rev-parse --short HEAD)
        
        # Ana versiyon numarasƒ± (semantic versioning)
        MAJOR_VERSION="2"
        MINOR_VERSION="0"
        
        # Tag ve versiyon formatƒ±: v2.0.20240315-142530-a1b2c3d
        TAG="v${MAJOR_VERSION}.${MINOR_VERSION}.${TIMESTAMP}-${SHORT_SHA}"
        VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${TIMESTAMP}"
        
        echo "üè∑Ô∏è Generated tag: $TAG"
        echo "üì¶ Generated version: $VERSION"
        echo "#Ô∏è‚É£ Build number: $BUILD_NUMBER"
        echo "üîó Short SHA: $SHORT_SHA"
        echo "üïê Timestamp: $TIMESTAMP"
        
        # Tag olu≈ütur ve push et
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        git tag -a "$TAG" -m "Auto build $TAG (Build #$BUILD_NUMBER)"
        git push origin "$TAG"
        
        # Outputs
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Tag created and pushed successfully"

  # üìù Inject Version Info
  inject-version:
    name: üìù Inject Version Info
    needs: create-tag
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create-tag.outputs.tag }}
        
    - name: Inject Version into HTML
      shell: bash
      run: |
        TAG="${{ needs.create-tag.outputs.tag }}"
        VERSION="${{ needs.create-tag.outputs.version }}"
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        BUILD_NUMBER="${{ needs.create-tag.outputs.build_number }}"
        
        echo "üîÑ Injecting version info..."
        echo "üì¶ Version: $VERSION"
        echo "üè∑Ô∏è Tag: $TAG"
        echo "üïê Build Time: $TIMESTAMP"
        echo "#Ô∏è‚É£ Build Number: $BUILD_NUMBER"
        
        # index.html'e versiyon bilgisini inject et (g√ºvenli regex)
        sed -i.bak "s|{{VERSION_PLACEHOLDER}}|$VERSION|g" app/v2/index.html
        sed -i.bak "s|{{TAG_PLACEHOLDER}}|$TAG|g" app/v2/index.html
        sed -i.bak "s|{{BUILD_TIME_PLACEHOLDER}}|$TIMESTAMP|g" app/v2/index.html
        sed -i.bak "s|{{BUILD_NUMBER_PLACEHOLDER}}|$BUILD_NUMBER|g" app/v2/index.html
        
        # Backup dosyalarƒ±nƒ± temizle
        rm -f app/v2/index.html.bak
        
        # version-info.js dosyasƒ±nƒ± olu≈ütur
        cat > app/v2/version-info.js << EOF
        // Auto-generated version info - DO NOT EDIT
        const APP_VERSION_INFO = {
          version: '$VERSION',
          tag: '$TAG',
          buildTime: '$TIMESTAMP',
          buildNumber: '$BUILD_NUMBER',
          gitSha: '${{ github.sha }}',
          branch: '${{ github.ref_name }}'
        };
        EOF
        
        # Sonu√ßlarƒ± doƒürula
        echo "‚úÖ Version injection completed"
        echo "üìÑ Checking injected content:"
        grep -n "footerVersionNumber" app/v2/index.html || echo "‚ö†Ô∏è Version placeholder not found"
        
    - name: Upload Versioned App
      uses: actions/upload-artifact@v4
      with:
        name: versioned-app
        path: ./app/v2/

  # üåê Web App Deploy
  web-deploy:
    name: üåê Deploy Web App
    needs: [create-tag, inject-version]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Download Versioned App
      uses: actions/download-artifact@v4
      with:
        name: versioned-app
        path: ./app/v2/
        
    - name: Setup Pages
      uses: actions/configure-pages@v5
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './app/v2'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # ü™ü Windows Desktop App Build
  build-windows:
    name: ü™ü Build Windows App
    needs: [create-tag, inject-version]
    runs-on: windows-latest

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create-tag.outputs.tag }}
        
    - name: Download Versioned App
      uses: actions/download-artifact@v4
      with:
        name: versioned-app
        path: ./app/v2/

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install Dependencies
      run: npm install

    - name: Create Icon (if needed)
      shell: powershell
      run: |
        if (Test-Path "app/v2/assets/img/app-icon.png") {
          Write-Host "App icon exists, creating ICO format..."
          try { 
            npm run create-icon 2>$null 
          } catch { 
            Write-Host "Icon creation skipped" 
          }
        } else {
          Write-Host "App icon not found, skipping icon creation"
        }

    - name: Build Windows App
      run: npm run build:win
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mudek-windows-x64
        path: |
          dist/*Windows*x64*.exe
          dist/*Windows*x64*.zip
          dist/*Windows*x64*.blockmap
          dist/latest.yml

  # üçé Mac Intel Build
  build-mac-intel:
    name: üçé Build Mac Intel App
    needs: [create-tag, inject-version]
    runs-on: macos-13

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create-tag.outputs.tag }}
        
    - name: Download Versioned App
      uses: actions/download-artifact@v4
      with:
        name: versioned-app
        path: ./app/v2/

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install Dependencies
      run: npm install

    - name: Create Icon (if needed)
      shell: bash
      run: |
        if [ -f "app/v2/assets/img/app-icon.png" ]; then
          echo "App icon exists, creating ICNS format..."
          npm run create-icon || echo "Icon creation skipped"
        else
          echo "App icon not found, skipping icon creation"
        fi

    - name: Build Mac Intel App
      run: npm run build:mac-intel
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Mac Intel Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mudek-mac-intel-x64
        path: |
          dist/*macOS*x64*.dmg
          dist/*macOS*x64*.zip
          dist/*macOS*x64*.blockmap
          dist/latest-mac.yml

  # üçé Mac M1/M2 Build
  build-mac-m1:
    name: üçé Build Mac M1/M2 App
    needs: [create-tag, inject-version]
    runs-on: macos-14

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create-tag.outputs.tag }}
        
    - name: Download Versioned App
      uses: actions/download-artifact@v4
      with:
        name: versioned-app
        path: ./app/v2/

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install Dependencies
      run: npm install

    - name: Create Icon (if needed)
      shell: bash
      run: |
        if [ -f "app/v2/assets/img/app-icon.png" ]; then
          echo "App icon exists, creating ICNS format..."
          npm run create-icon || echo "Icon creation skipped"
        else
          echo "App icon not found, skipping icon creation"
        fi

    - name: Build Mac M1/M2 App
      run: npm run build:mac-m1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Mac M1/M2 Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mudek-mac-m1-arm64
        path: |
          dist/*macOS*arm64*.dmg
          dist/*macOS*arm64*.zip
          dist/*macOS*arm64*.blockmap
          dist/latest-mac.yml

  # üêß Linux Build
  build-linux:
    name: üêß Build Linux App
    needs: [create-tag, inject-version]
    runs-on: ubuntu-latest

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create-tag.outputs.tag }}
        
    - name: Download Versioned App
      uses: actions/download-artifact@v4
      with:
        name: versioned-app
        path: ./app/v2/

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install Dependencies
      run: npm install

    - name: Create Icon (if needed)
      shell: bash
      run: |
        if [ -f "app/v2/assets/img/app-icon.png" ]; then
          echo "App icon exists, using PNG format..."
          npm run create-icon || echo "Icon creation skipped"
        else
          echo "App icon not found, skipping icon creation"
        fi

    - name: Build Linux App
      run: npm run build:linux
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mudek-linux-x64
        path: |
          dist/*Linux*x64*.AppImage
          dist/*Linux*x64*.deb
          dist/*Linux*x64*.rpm
          dist/*Linux*x64*.zip
          dist/latest-linux.yml

  # üöÄ GitHub Release Creation
  release:
    name: üöÄ Create Multi-Platform Release
    needs: [create-tag, build-windows, build-mac-intel, build-mac-m1, build-linux]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
        
    - name: Download Windows Artifacts
      uses: actions/download-artifact@v4
      with:
        name: mudek-windows-x64
        path: ./release-assets/windows/
        
    - name: Download Mac Intel Artifacts
      uses: actions/download-artifact@v4
      with:
        name: mudek-mac-intel-x64
        path: ./release-assets/mac-intel/
        
    - name: Download Mac M1/M2 Artifacts
      uses: actions/download-artifact@v4
      with:
        name: mudek-mac-m1-arm64
        path: ./release-assets/mac-m1/
        
    - name: Download Linux Artifacts
      uses: actions/download-artifact@v4
      with:
        name: mudek-linux-x64
        path: ./release-assets/linux/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create-tag.outputs.tag }}
        name: MUDEK Ders Deƒüerlendirme Sistemi ${{ needs.create-tag.outputs.tag }}
        files: |
          release-assets/windows/*
          release-assets/mac-intel/*
          release-assets/mac-m1/*
          release-assets/linux/*
        draft: false
        prerelease: ${{ contains(needs.create-tag.outputs.tag, 'beta') || contains(needs.create-tag.outputs.tag, 'alpha') }}
        body: |
          ## üéì MUDEK Ders Deƒüerlendirme Sistemi ${{ needs.create-tag.outputs.tag }}
          
          **CORUH ARGE ile Resmi Multi-Platform Release**
          
          RTE√ú MUDEK ders deƒüerlendirme ve akreditasyon sistemi masa√ºst√º uygulamasƒ±.
          
          **√ñzellikler:**
          - üè¢ CORUH ARGE kurumsal logosu ve tasarƒ±m
          - üíª Native masa√ºst√º uygulamasƒ± (Windows, Mac, Linux)
          - üìÅ Dosya a√ß/kaydet native dialog'larƒ±  
          - ‚å®Ô∏è Klavye kƒ±sayollarƒ± desteƒüi (Ctrl+O, Ctrl+S)
          - üìä MUDEK kriterlerine uygun deƒüerlendirme sistemi
          - üåê Web versiyonu mevcut
          
          **Web Versiyonu:** https://coruhtech.github.io/mudek-ders-degerlendirme-formu/app/v2/
          
          **Geli≈ütirici:** Dr. √ñƒür. √úyesi Uƒüur CORUH
          **Kurum:** CORUH ARGE VE TEKNOLOJƒ∞ SANAYƒ∞ Tƒ∞CARET Lƒ∞Mƒ∞TED ≈ûƒ∞RKETƒ∞  
          **ƒ∞leti≈üim:** ugur.coruh@erdogan.edu.tr
          **Web:** [www.coruh.com.tr](https://www.coruh.com.tr)
          
          ---
          
          ### üì• Platform Bazlƒ± ƒ∞ndirme Se√ßenekleri
          
          #### ü™ü Windows (64-bit)
          - **Setup (√ñnerilen)**: `MUDEK-Setup-${{ needs.create-tag.outputs.tag }}-Windows-x64.exe`
          - **Portable ZIP**: `MUDEK-System-${{ needs.create-tag.outputs.tag }}-Windows-x64.zip`
          
          #### üçé macOS
          - **Intel Mac**: `MUDEK-Ders-Degerlendirme-Sistemi-${{ needs.create-tag.outputs.tag }}-macOS-x64.dmg`
          - **M1/M2 Mac**: `MUDEK-Ders-Degerlendirme-Sistemi-${{ needs.create-tag.outputs.tag }}-macOS-arm64.dmg`
          - **Intel ZIP**: `MUDEK-Ders-Degerlendirme-Sistemi-${{ needs.create-tag.outputs.tag }}-macOS-x64.zip`
          - **M1/M2 ZIP**: `MUDEK-Ders-Degerlendirme-Sistemi-${{ needs.create-tag.outputs.tag }}-macOS-arm64.zip`
          
          #### üêß Linux (64-bit)
          - **AppImage (Universal)**: `MUDEK-Ders-Degerlendirme-Sistemi-${{ needs.create-tag.outputs.tag }}-Linux-x64.AppImage`
          - **DEB (Ubuntu/Debian)**: `MUDEK-Ders-Degerlendirme-Sistemi-${{ needs.create-tag.outputs.tag }}-Linux-x64.deb`
          - **RPM (CentOS/RHEL)**: `MUDEK-Ders-Degerlendirme-Sistemi-${{ needs.create-tag.outputs.tag }}-Linux-x64.rpm`
          - **Portable ZIP**: `MUDEK-Ders-Degerlendirme-Sistemi-${{ needs.create-tag.outputs.tag }}-Linux-x64.zip`
          
          ### üõ†Ô∏è Sistem Gereksinimleri
          
          **Windows:**
          - Windows 10/11 (64-bit)
          - .NET Framework 4.8 veya √ºzeri
          - 100 MB bo≈ü disk alanƒ±
          
          **macOS:**
          - macOS 10.14 Mojave veya √ºzeri
          - Intel i≈ülemci veya Apple Silicon (M1/M2)
          - 100 MB bo≈ü disk alanƒ±
          
          **Linux:**
          - Ubuntu 18.04+ / Debian 10+ / CentOS 8+
          - GLIBC 2.23 veya √ºzeri
          - 100 MB bo≈ü disk alanƒ±
          
          ### üìã Kurulum Talimatlarƒ±
          
          **Windows:**
          1. `.exe` dosyasƒ±nƒ± indirin ve √ßalƒ±≈ütƒ±rƒ±n
          2. Kurulum sihirbazƒ±nƒ± takip edin
          3. Masa√ºst√º kƒ±sayolundan ba≈ülatƒ±n
          
          **macOS:**
          1. `.dmg` dosyasƒ±nƒ± indirin ve a√ßƒ±n
          2. Uygulamayƒ± Applications klas√∂r√ºne s√ºr√ºkleyin
          3. Launchpad'den veya Applications'tan ba≈ülatƒ±n
          
          **Linux:**
          - **AppImage**: ƒ∞ndirin, √ßalƒ±≈ütƒ±rƒ±labilir yapƒ±n (`chmod +x`) ve √ßalƒ±≈ütƒ±rƒ±n
          - **DEB**: `sudo dpkg -i mudek-*.deb` komutu ile kurun
          - **RPM**: `sudo rpm -i mudek-*.rpm` komutu ile kurun
          
          ### üìù S√ºr√ºm Notlarƒ±
          
          - Build Tarihi: ${{ github.event.head_commit.timestamp }}
          - Commit: ${{ github.sha }}
          - Desteklenen Platformlar: Windows x64, macOS x64/arm64, Linux x64
          
          Bu s√ºr√ºmde yapƒ±lan deƒüi≈üiklikler i√ßin commit ge√ßmi≈üini inceleyebilirsiniz.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 